plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven { url = "https://maven.terraformersmc.com/" } // Modmenu, EMI
    maven { url = "https://maven.blamejared.com" } // Patchouli
    maven { url = "https://api.modrinth.com/maven" } // Revelationary, Fractal
    maven { url = "https://jitpack.io" } // Arrowhead, Dimensional Reverb, Step Height Entity Attribute
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release/" } // Entity Reach Attribute
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("de.dafuqs.spectrum:Spectrum:${project.spectrum_version}") {
        exclude(group: "com.unascribed:ears-api")
        exclude(group: "maven.modrinth:colorful-hearts")
    }
    modImplementation("dev.emi:trinkets:${project.trinkets_version}")
    modImplementation("vazkii.patchouli:Patchouli:${project.patchouli_version}")
    modImplementation("maven.modrinth:Revelationary:${project.revelationary_version}")
    modImplementation("maven.modrinth:fractal-lib:${project.fractal_version}")
    modImplementation("com.github.DaFuqs:Arrowhead:${project.arrowhead_version}")
    modImplementation("com.github.DaFuqs:DimensionalReverb:${project.dimensional_reverb_version}")
    modImplementation("maven.modrinth:AdditionalEntityAttributes:${project.additional_entity_attributes_version}")
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))
    modImplementation("com.github.Noaaan:Matchbooks:${project.matchbooks_version}")
    modImplementation("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attribute_version}")
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cca_version}")

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
    modApi("dev.architectury:architectury-fabric:${project.architectury_version}") { exclude(group: "net.fabricmc.fabric-api") }
    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

    // https://github.com/shedaniel/RoughlyEnoughItems
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    // https://github.com/emilyploszaj/emi
    modCompileOnly("dev.emi:emi-fabric:${emi_version}")

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI or disabled.")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
